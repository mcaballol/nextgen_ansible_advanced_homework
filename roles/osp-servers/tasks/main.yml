---

- name: Find out what the remote machine's mounts are
  slurp:
    src: /root/.ssh/openstack.pub
  register: __openstack_pub

- debug:
    msg: "{{ __openstack_pub['content'] | b64decode }}"

- debug:
    msg: "{{ osp_servers.values() }}"

# tasks file for osp.servers
- name: Create server instances
  os_server:
    cloud:            "{{ openstack_cloud                           | default('openstack') }}"
    name:             "{{ __osp_server.name }}"
    state:            "{{ openstack_server_state              | default(__osp_server.state) | default('present') }}"
    image:            "{{ __osp_server.image                  | default('rhel-guest') }}"
    flavor:           "{{ __osp_server.flavor                 | default('m1.medium') }}"
    key_name:         "{{ __osp_server.key_name               | default('ansible_ssh') }}"
    wait:             "{{ __osp_server.wait                   | default('yes') }}"
    security_groups:  "{{ __osp_server.security_group }}"
    delete_fip:       "{{ __osp_server.delete_fip             | default(true) }}"
    meta: "group={{ __osp_server.meta[0].group }},deployment_name={{ __osp_server.meta[0].deployment_name }}"
    nics:
      - net-name: int_network
      #    - net-name: ext_network
    userdata: |
      #!/bin/bash
      echo "{{ __openstack_pub['content'] | b64decode }}" > /tmp/openstack.pub
      cat /tmp/openstack.pub >> /home/cloud-user/.ssh/authorized_keys
  loop: "{{ osp_servers.values() }}"
  loop_control:
    loop_var: __osp_server
  async: 900
  poll: 0
  register: r_instances

- debug:
    msg: "{{ r_instances }}"

- name: Wait for async OSP instance creation to complete
  async_status: "jid={{ item.ansible_job_id }}"
  register: r_wait
  until: r_wait.finished
  retries: 900
  loop: "{{ r_instances.results }}"

- name: Debug instances
  debug:
    msg: "Server is {{ __instance.__openstack_server.instance_name }}"
    verbosity: 2
  loop: "{{ r_instances.results }}"
  loop_control:
    loop_var: __instance

- when: openstack_server_state != 'absent' | default(true)
  block:

    - name: Add floating IP to instances
      os_floating_ip:
        cloud: openstack
        state: "{{ openstack_server_state | default('present') }}"
        reuse: yes
        server: "{{ __instance.__openstack_server.instance_name }}"
        network: ext_network
        wait: true
        timeout: 180
      loop: "{{ r_instances.results }}"
      loop_control:
        loop_var: __instance
      register: r_floating_ips

    - name: Wait for servers by name to be available
      wait_for:
        host: "{{ __fip.floating_ip.floating_ip_address }}"
        port: 22
        search_regex: OpenSSH
        timeout: 600
      loop: "{{ r_floating_ips.results }}"
      loop_control:
        loop_var: __fip
      delegate_to: "{{ inventory_hostname }}"

...
